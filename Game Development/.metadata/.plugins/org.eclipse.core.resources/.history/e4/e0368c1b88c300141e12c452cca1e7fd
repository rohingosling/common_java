package rohin.gameengine;

import java.util.*;

// /////////////////////////////////////////////////////////////////////////////
// 
// CommandInvoker:
// 
// Serves as a management container for ICommand objects.
// 
// Author:  Rohin Gosling
// Version: 1.0
// Since:   2014-04-18
// 
///////////////////////////////////////////////////////////////////////////////

public class CommandInvoker
{
    // //////////////////////////////////////////////////////////////////////////
    // 
    // DATA TYPES
    //
    // //////////////////////////////////////////////////////////////////////////
    
    // //////////////////////////////////////////////////////////////////////////
    // 
    // CONSTANTS
    //
    // //////////////////////////////////////////////////////////////////////////
    
    // //////////////////////////////////////////////////////////////////////////
    // 
    // FIELDS
    //
    // //////////////////////////////////////////////////////////////////////////
    
    Queue < ICommand > commandQueue;
 
    // //////////////////////////////////////////////////////////////////////////
    // 
    // ACCESSORS and MUTATORS
    //
    // //////////////////////////////////////////////////////////////////////////
 
    // //////////////////////////////////////////////////////////////////////////
    // 
    // METHODS
    //
    // //////////////////////////////////////////////////////////////////////////
    
    // -------------------------------------------------------------------------
    //
    // Constructor 1
    //
    // -------------------------------------------------------------------------
    
    public CommandInvoker ()
    {
        this.commandQueue = new LinkedList < ICommand > ();
    }
    
    
    // -------------------------------------------------------------------------
    //
    // PostCommand
    //
    // Post a command to the command queue, for later execution.
    //
    // Arguments:
    //
    //     command
    //     The ICommand object to enqueue.
    //
    // -------------------------------------------------------------------------
    
    public void Clear ()
    {
        this.commandQueue.clear ();
    }
    
    // -------------------------------------------------------------------------
    //
    // PostCommand
    //
    // Post a command to the command queue, for later execution.
    //
    // Arguments:
    //
    //     command
    //     The ICommand object to enqueue.
    //
    // -------------------------------------------------------------------------
    
    public void PostCommand ( ICommand command )
    {
        this.commandQueue.add ( command );
    }
    
    
    // -------------------------------------------------------------------------
    //
    // Flush
    //
    // Execute and dequeue all commands in the queue.
    //
    // -------------------------------------------------------------------------
    
    public void Flush ()
    {
        while ( this.commandQueue.size () > 0 )
        {
            ICommand command = this.commandQueue.remove ();
            command.Execute ();
        }
    }
    
    // -------------------------------------------------------------------------
    //
    // ExecuteAll
    //
    // Executes all commands in teh queue, but does not dequeue commands after
    // executing them.
    //
    // -------------------------------------------------------------------------
    
    public void ExecuteAll ()
    {
        for ( ICommand command : this.commandQueue )
        {   
            command.Execute ();
        }
    }
    
    // //////////////////////////////////////////////////////////////////////////
    // 
    // OVERRIDEBLE METHODS
    //
    // //////////////////////////////////////////////////////////////////////////
}

package rohin.gameengine;

import java.util.*;

// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
// CommandManager:
// 
// Serves as a management container for ICommand objects.
// 
// Author:  Rohin Gosling
// Version: 1.0
// Since:   2014-04-18
// 
// ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

public class CommandManager
{
    // ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // 
    // DATA TYPES
    //
    // ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    // ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // 
    // CONSTANTS
    //
    // ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    // ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // 
    // FIELDS
    //
    // ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    private Queue <ICommand> commandQueue;
    private Boolean          loggingEnabled;
    private ConsoleLogger    logger;
 
    // ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // 
    // ACCESSORS and MUTATORS
    //
    // ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
 
    // ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // 
    // METHODS
    //
    // ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    // ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    //
    // Constructor 1
    //
    // ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    
    public CommandManager ()
    {
        this.commandQueue   = new LinkedList < ICommand > ();
        this.loggingEnabled = true;
        this.logger         = new ConsoleLogger ( this, this.loggingEnabled );
    }
       
    // --------------------------------------------------------------------------------------------------------------------------------------------------------
    //
    // PostCommand
    //
    // Post a command to the command queue, for later execution.
    //
    // Arguments:
    //
    //     command
    //     The ICommand object to enqueue.
    //
    // --------------------------------------------------------------------------------------------------------------------------------------------------------
    
    public void clear ()
    {
        this.commandQueue.clear ();
    }
    
    // --------------------------------------------------------------------------------------------------------------------------------------------------------
    //
    // PostCommand
    //
    // Post a command to the command queue, for later execution.
    //
    // Arguments:
    //
    //     command
    //     The ICommand object to enqueue.
    //
    // --------------------------------------------------------------------------------------------------------------------------------------------------------
    
    public void postCommand ( ICommand command )
    {
        this.commandQueue.add ( command );
        
        // Console Logger.
        
        logger.log ( command.getClass ().getSimpleName () );
    }
    
    
    // --------------------------------------------------------------------------------------------------------------------------------------------------------
    //
    // Flush
    //
    // Execute and dequeue all commands in the queue.
    //
    // --------------------------------------------------------------------------------------------------------------------------------------------------------
    
    public void flush ()
    {
        while ( this.commandQueue.size () > 0 )
        {
            ICommand command = this.commandQueue.remove ();
            command.execute ();       
        }
    }
    
    // --------------------------------------------------------------------------------------------------------------------------------------------------------
    //
    // ExecuteAll
    //
    // Executes all commands in teh queue, but does not dequeue commands after
    // executing them.
    //
    // --------------------------------------------------------------------------------------------------------------------------------------------------------
    
    public void executeAll ()
    {
        for ( ICommand command : this.commandQueue )
        {   
            command.execute ();
        }
    }
    
    // ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // 
    // OVERRIDEBLE METHODS
    //
    // ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}
